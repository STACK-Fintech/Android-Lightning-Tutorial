package fr.acinq.eclair.wallet.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PAYMENT".
*/
public class PaymentDao extends AbstractDao<Payment, Long> {

    public static final String TABLENAME = "PAYMENT";

    /**
     * Properties of entity Payment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Direction = new Property(2, String.class, "direction", false, "DIRECTION");
        public final static Property Reference = new Property(3, String.class, "reference", false, "REFERENCE");
        public final static Property Recipient = new Property(4, String.class, "recipient", false, "RECIPIENT");
        public final static Property Preimage = new Property(5, String.class, "preimage", false, "PREIMAGE");
        public final static Property PaymentRequest = new Property(6, String.class, "paymentRequest", false, "PAYMENT_REQUEST");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property ConfidenceBlocks = new Property(8, int.class, "confidenceBlocks", false, "CONFIDENCE_BLOCKS");
        public final static Property ConfidenceType = new Property(9, int.class, "confidenceType", false, "CONFIDENCE_TYPE");
        public final static Property TxPayload = new Property(10, String.class, "txPayload", false, "TX_PAYLOAD");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Created = new Property(12, java.util.Date.class, "created", false, "CREATED");
        public final static Property Updated = new Property(13, java.util.Date.class, "updated", false, "UPDATED");
        public final static Property LastErrorCause = new Property(14, String.class, "lastErrorCause", false, "LAST_ERROR_CAUSE");
        public final static Property AmountRequestedMsat = new Property(15, long.class, "amountRequestedMsat", false, "AMOUNT_REQUESTED_MSAT");
        public final static Property AmountSentMsat = new Property(16, long.class, "amountSentMsat", false, "AMOUNT_SENT_MSAT");
        public final static Property AmountPaidMsat = new Property(17, long.class, "amountPaidMsat", false, "AMOUNT_PAID_MSAT");
        public final static Property FeesPaidMsat = new Property(18, long.class, "feesPaidMsat", false, "FEES_PAID_MSAT");
    }

    private final PaymentTypeConverter typeConverter = new PaymentTypeConverter();
    private final PaymentDirectionConverter directionConverter = new PaymentDirectionConverter();
    private final PaymentStatusConverter statusConverter = new PaymentStatusConverter();

    public PaymentDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"DIRECTION\" TEXT NOT NULL ," + // 2: direction
                "\"REFERENCE\" TEXT NOT NULL ," + // 3: reference
                "\"RECIPIENT\" TEXT," + // 4: recipient
                "\"PREIMAGE\" TEXT," + // 5: preimage
                "\"PAYMENT_REQUEST\" TEXT," + // 6: paymentRequest
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"CONFIDENCE_BLOCKS\" INTEGER NOT NULL ," + // 8: confidenceBlocks
                "\"CONFIDENCE_TYPE\" INTEGER NOT NULL ," + // 9: confidenceType
                "\"TX_PAYLOAD\" TEXT," + // 10: txPayload
                "\"STATUS\" TEXT," + // 11: status
                "\"CREATED\" INTEGER NOT NULL ," + // 12: created
                "\"UPDATED\" INTEGER," + // 13: updated
                "\"LAST_ERROR_CAUSE\" TEXT," + // 14: lastErrorCause
                "\"AMOUNT_REQUESTED_MSAT\" INTEGER NOT NULL ," + // 15: amountRequestedMsat
                "\"AMOUNT_SENT_MSAT\" INTEGER NOT NULL ," + // 16: amountSentMsat
                "\"AMOUNT_PAID_MSAT\" INTEGER NOT NULL ," + // 17: amountPaidMsat
                "\"FEES_PAID_MSAT\" INTEGER NOT NULL );"); // 18: feesPaidMsat
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PAYMENT_TYPE_REFERENCE ON \"PAYMENT\"" +
                " (\"TYPE\" ASC,\"REFERENCE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Payment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, typeConverter.convertToDatabaseValue(entity.getType()));
        stmt.bindString(3, directionConverter.convertToDatabaseValue(entity.getDirection()));
        stmt.bindString(4, entity.getReference());
 
        String recipient = entity.getRecipient();
        if (recipient != null) {
            stmt.bindString(5, recipient);
        }
 
        String preimage = entity.getPreimage();
        if (preimage != null) {
            stmt.bindString(6, preimage);
        }
 
        String paymentRequest = entity.getPaymentRequest();
        if (paymentRequest != null) {
            stmt.bindString(7, paymentRequest);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
        stmt.bindLong(9, entity.getConfidenceBlocks());
        stmt.bindLong(10, entity.getConfidenceType());
 
        String txPayload = entity.getTxPayload();
        if (txPayload != null) {
            stmt.bindString(11, txPayload);
        }
 
        PaymentStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, statusConverter.convertToDatabaseValue(status));
        }
        stmt.bindLong(13, entity.getCreated().getTime());
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(14, updated.getTime());
        }
 
        String lastErrorCause = entity.getLastErrorCause();
        if (lastErrorCause != null) {
            stmt.bindString(15, lastErrorCause);
        }
        stmt.bindLong(16, entity.getAmountRequestedMsat());
        stmt.bindLong(17, entity.getAmountSentMsat());
        stmt.bindLong(18, entity.getAmountPaidMsat());
        stmt.bindLong(19, entity.getFeesPaidMsat());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Payment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, typeConverter.convertToDatabaseValue(entity.getType()));
        stmt.bindString(3, directionConverter.convertToDatabaseValue(entity.getDirection()));
        stmt.bindString(4, entity.getReference());
 
        String recipient = entity.getRecipient();
        if (recipient != null) {
            stmt.bindString(5, recipient);
        }
 
        String preimage = entity.getPreimage();
        if (preimage != null) {
            stmt.bindString(6, preimage);
        }
 
        String paymentRequest = entity.getPaymentRequest();
        if (paymentRequest != null) {
            stmt.bindString(7, paymentRequest);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
        stmt.bindLong(9, entity.getConfidenceBlocks());
        stmt.bindLong(10, entity.getConfidenceType());
 
        String txPayload = entity.getTxPayload();
        if (txPayload != null) {
            stmt.bindString(11, txPayload);
        }
 
        PaymentStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, statusConverter.convertToDatabaseValue(status));
        }
        stmt.bindLong(13, entity.getCreated().getTime());
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(14, updated.getTime());
        }
 
        String lastErrorCause = entity.getLastErrorCause();
        if (lastErrorCause != null) {
            stmt.bindString(15, lastErrorCause);
        }
        stmt.bindLong(16, entity.getAmountRequestedMsat());
        stmt.bindLong(17, entity.getAmountSentMsat());
        stmt.bindLong(18, entity.getAmountPaidMsat());
        stmt.bindLong(19, entity.getFeesPaidMsat());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Payment readEntity(Cursor cursor, int offset) {
        Payment entity = new Payment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            typeConverter.convertToEntityProperty(cursor.getString(offset + 1)), // type
            directionConverter.convertToEntityProperty(cursor.getString(offset + 2)), // direction
            cursor.getString(offset + 3), // reference
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // recipient
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // preimage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // paymentRequest
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.getInt(offset + 8), // confidenceBlocks
            cursor.getInt(offset + 9), // confidenceType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // txPayload
            cursor.isNull(offset + 11) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 11)), // status
            new java.util.Date(cursor.getLong(offset + 12)), // created
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // updated
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lastErrorCause
            cursor.getLong(offset + 15), // amountRequestedMsat
            cursor.getLong(offset + 16), // amountSentMsat
            cursor.getLong(offset + 17), // amountPaidMsat
            cursor.getLong(offset + 18) // feesPaidMsat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Payment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(typeConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setDirection(directionConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setReference(cursor.getString(offset + 3));
        entity.setRecipient(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPreimage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPaymentRequest(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setConfidenceBlocks(cursor.getInt(offset + 8));
        entity.setConfidenceType(cursor.getInt(offset + 9));
        entity.setTxPayload(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setCreated(new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUpdated(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setLastErrorCause(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAmountRequestedMsat(cursor.getLong(offset + 15));
        entity.setAmountSentMsat(cursor.getLong(offset + 16));
        entity.setAmountPaidMsat(cursor.getLong(offset + 17));
        entity.setFeesPaidMsat(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Payment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Payment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Payment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
